import logging
import telebot
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.shortcuts import get_object_or_404
from telebot import types
from django.conf import settings
from proweb_bot.models import CustomUser, AdminUser, Groups, GroupsCategory, Posts, MediaPost, GroupPost
from proweb_bot.translations import translations
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot(settings.TG_BOT_TOKEN, parse_mode=None)
telebot.logger.setLevel(logging.DEBUG)


def set_webhook():
    webhook_url = f"https://7ad7-192-166-230-205.ngrok-free.app/webhook/"
    bot.set_webhook(url=webhook_url)


set_webhook()
lang_button = {}
bot_data = {}
broadcast_data = {}

# logging.basicConfig(level=logging.INFO)


@bot.message_handler(commands=['start'])
def start(message):
    user, created = CustomUser.objects.get_or_create(
        username_tg=message.from_user.username,
        tg_id=message.chat.id,
        defaults={'name_tg': message.from_user.first_name}
    )

    if created:

        user.save()
        logging.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username_tg}")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username_tg} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_en = types.KeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫")
    btn_ru = types.KeyboardButton(text="O'zbek tili üá∫üáø")
    markup.add(btn_en, btn_ru)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫/Tilni tanlang', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫", "O'zbek tili üá∫üáø"])
def choose_language(message):
    user = CustomUser.objects.get(username_tg=message.from_user.username)

    if message.text == "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫":
        user.language = 'ru'
    elif message.text == "O'zbek tili üá∫üáø":
        user.language = 'uz'

    user.save()

    bot.send_message(message.chat.id, translations[user.language]['btn_send_phone'])

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_phone = types.KeyboardButton(text=translations[user.language]['btn_send_phone'], request_contact=True)
    markup.add(button_phone)
    bot.send_message(message.chat.id, translations[user.language]['btn_send_phone'], reply_markup=markup)


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ–µ –∫–Ω–æ–ø–∫–∏
    support = types.InlineKeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='t.me/itsmylifestyle')
    coworking = types.InlineKeyboardButton(text="–ö–æ–≤–æ—Ä–∫–∏–Ω–≥", url='t.me/proweb_coworking')
    keyboard.add(support, coworking)

    competitions = types.InlineKeyboardButton(text="–ö–æ–Ω–∫—É—Ä—Å—ãüéâ", callback_data='competitions')
    web_site = types.InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç", url='proweb.uz')
    keyboard.add(competitions, web_site)

    well = types.InlineKeyboardButton(text="–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å", callback_data='well')
    review = types.InlineKeyboardButton(text="–û—Å—Ç–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='review')
    keyboard.add(well, review)

    rules = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –æ–±—É—á–µ–Ω–∏—è", callback_data="rules")
    keyboard.add(rules)

    if message.contact:
        try:
            user = CustomUser.objects.get(username_tg=message.from_user.username)
            user.phone_tg = message.contact.phone_number
            user.save()
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            bot.send_message(message.chat.id, translations[user.language]['text_info'], reply_markup=keyboard)

        except CustomUser.DoesNotExist:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@receiver(post_save, sender=CustomUser)
def create_admin_user(sender, instance, created, **kwargs):
    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_admin")
    markup.add(confirm_button)
    if instance.is_admin:
        AdminUser.objects.create(user=instance, telegram_id=instance.username_tg)
        bot.send_message(instance.tg_id, translations[instance.language]['text_admin_notification'],
                         reply_markup=markup)
    # else:
    #     AdminUser.objects.filter(user=instance).delete()
    #     print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {instance.username} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_admin")
def handle_confirm_admin(call):
    chat_id = call.message.chat.id

    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    show_admin_panel(chat_id)


def show_admin_panel(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_send_messages = types.KeyboardButton("üì© –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    button_view_courses = types.KeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    markup.add(button_send_messages, button_view_courses)
    bot.send_message(chat_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üëá", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üì© –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
def handle_broadcast_to_users(message):
    chat_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_ru = types.KeyboardButton('–†—É—Åüá∑üá∫')
    button_uz = types.KeyboardButton('Uzbüá∫üáø')
    button_all = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º')
    markup.add(button_ru, button_uz)
    markup.add(button_all)

    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–†—É—Åüá∑üá∫', 'Uzbüá∫üáø', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º'])
def lang(message):
    chat_id = message.chat.id
    info_button = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ –æ–ø—Ü–∏—é "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º"
    lang_button[chat_id] = {
        'info_button': info_button
    }

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    bot.register_next_step_handler(message, send_broadcast_to_all_users)


def send_broadcast_to_all_users(message):
    chat_id = message.chat.id
    broadcast_text = message.text
    selected_language = lang_button[chat_id]['info_button']

    if selected_language == '–†—É—Åüá∑üá∫':
        users = CustomUser.objects.filter(is_admin=False, language='ru')
    elif selected_language == 'Uzbüá∫üáø':
        users = CustomUser.objects.filter(is_admin=False, language='uz')
    else:
        users = CustomUser.objects.filter(is_admin=False)

    total_users = users.count()
    success_count = 0
    failed_count = 0

    for user in users:
        try:
            bot.send_message(user.tg_id, broadcast_text)
            success_count += 1
        except Exception as e:
            failed_count += 1

    bot.send_message(chat_id,
                     f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}/{total_users}\n'
                     f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count} —Å–æ–æ–±—â–µ–Ω–∏–π.')
    show_admin_panel(chat_id)


@bot.message_handler(func=lambda message: message.text == 'üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
def category(message):
    chat_id = message.chat.id

    courses = GroupsCategory.objects.all()

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for course in courses:
        markup.add(types.KeyboardButton(course.category_name))

    markup.add(types.KeyboardButton("–î–∞–ª–µ–µ"))

    bot_data[chat_id] = {"selected_courses": []}

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Ä—Å–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in [cat.category_name for cat in GroupsCategory.objects.all()])
def handle_course_selection(message):
    chat_id = message.chat.id
    selected_course = message.text

    if "selected_courses" in bot_data[chat_id]:
        if selected_course not in bot_data[chat_id]["selected_courses"]:
            bot_data[chat_id]["selected_courses"].append(selected_course)
            bot.send_message(chat_id, f"–ö—É—Ä—Å '{selected_course}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º.")
        else:
            bot.send_message(chat_id, f"–ö—É—Ä—Å '{selected_course}' —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /choose_courses.")


@bot.message_handler(func=lambda message: message.text == "–î–∞–ª–µ–µ")
def handle_next_step(message):
    chat_id = message.chat.id
    selected_courses = bot_data[chat_id].get("selected_courses", [])

    if not selected_courses:
        bot.send_message(chat_id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É—Ä—Å.")
        return

    choose_language(chat_id)


def choose_language(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton("–†–£–°"), types.KeyboardButton("UZB"), types.KeyboardButton("–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º"), )

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["–†–£–°", "UZB", "–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º"])
def handle_language_selection(message):
    chat_id = message.chat.id
    selected_language = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ—Å–ª–∞—Ç—å'))

    if chat_id in bot_data:
        if "selected_courses" in bot_data[chat_id]:
            selected_courses = bot_data[chat_id]["selected_courses"]
            groups = Groups.objects.none()

            if selected_language == "–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º":
                for course in selected_courses:
                    groups = groups | Groups.objects.filter(category__category_name=course)
            else:
                for course in selected_courses:
                    groups = groups | Groups.objects.filter(category__category_name=course,
                                                            language=selected_language)

            if groups.exists():
                bot_data[chat_id]["selected_language"] = selected_language
                bot_data[chat_id]["groups"] = groups  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏

                bot.send_message(chat_id,
                                 f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å —è–∑—ã–∫–æ–º '{selected_language}'",
                                 reply_markup=markup)
            else:
                bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.")
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")


@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ—Å–ª–∞—Ç—å')
def mail(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –≥—Ä—É–ø–ø—ã')


@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'poll'])
def handle_forwarding(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id in bot_data and "groups" in bot_data[chat_id]:
        groups = bot_data[chat_id]["groups"]  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        if groups.exists():
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã
            for group in groups:
                try:
                    bot.forward_message(group.group_id, chat_id, message.message_id)
                except Exception as e:
                    bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –≥—Ä—É–ø–ø—É {group.group_id}: {e}")

            bot.send_message(chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ {len(groups)} –≥—Ä—É–ø–ø–∞–º.")
            show_admin_panel(chat_id)
        else:
            bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã –∏ —è–∑—ã–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")


@bot.message_handler(content_types=['text', 'photo', 'video', 'voice'])
def handle_initial_message(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_send = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
    button_cancel = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    button_new_post = types.KeyboardButton('–ù–æ–≤—ã–π –ø–æ—Å—Ç')
    markup.add(button_send, button_cancel, button_new_post)

    if chat_id not in bot_data or "selected_language" not in bot_data[chat_id]:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    if chat_id not in broadcast_data:
        broadcast_data[chat_id] = {
            'posts': []  # –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        }

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.content_type in ['photo', 'video', 'voice']:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not broadcast_data[chat_id]['posts']:
            broadcast_data[chat_id]['posts'].append({
                'media': [],
                'text': None
            })

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
        current_post = broadcast_data[chat_id]['posts'][-1]
        if message.content_type == 'photo':
            media = types.InputMediaPhoto(message.photo[-1].file_id, caption=message.caption or "")
        elif message.content_type == 'video':
            media = types.InputMediaVideo(message.video.file_id, caption=message.caption or "")
        elif message.content_type == 'voice':
            # –ü—Ä—è–º–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            media = {'type': 'voice', 'file_id': message.voice.file_id}

        current_post['media'].append(media)
        print(f'–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {current_post["media"]}')

        bot.send_message(chat_id, "–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –º–µ–¥–∏–∞.",
                         reply_markup=markup)

    elif message.content_type == 'text':
        if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
            if not broadcast_data[chat_id]['posts']:
                bot.send_message(chat_id, "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                return
            send_broadcast(message)

        elif message.text == '–û—Ç–º–µ–Ω–∞':
            cancel_broadcast(message)

        elif message.text == '–ù–æ–≤—ã–π –ø–æ—Å—Ç':
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
            broadcast_data[chat_id]['posts'].append({
                'media': [],
                'text': None
            })
            bot.send_message(chat_id, "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.")

        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã
            if not broadcast_data[chat_id]['posts']:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                broadcast_data[chat_id]['posts'].append({
                    'media': [],
                    'text': message.text
                })
                bot.send_message(chat_id,
                                 "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π –ø–æ—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.",
                                 reply_markup=markup)
            else:
                current_post = broadcast_data[chat_id]['posts'][-1]
                current_post['text'] = message.text
                bot.send_message(chat_id, "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.",
                                 reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
def send_broadcast(message):
    chat_id = message.chat.id
    if chat_id in broadcast_data:
        groups = bot_data[chat_id].get("groups", [])
        posts = broadcast_data[chat_id]['posts']

        if groups:
            if not posts:
                bot.send_message(chat_id, "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                return

            for post_data in posts:
                media_group = post_data.get('media', [])
                broadcast_text = post_data.get('text', '')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
                formatted_text = format_text_telegram(broadcast_text)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                post_instance = Posts.objects.create(text_post=formatted_text)

                if media_group:
                    for media in media_group:
                        if isinstance(media, types.InputMediaPhoto):
                            MediaPost.objects.create(post=post_instance, photo=media.media)
                        elif isinstance(media, types.InputMediaVideo):
                            MediaPost.objects.create(post=post_instance, video=media.media)

                for group in groups:
                    try:
                        if media_group:
                            sent_media_group = bot.send_media_group(group.group_id, media_group)
                            for sent_message in sent_media_group:
                                GroupPost.objects.create(post=post_instance, group=group,
                                                         message_id=sent_message.message_id)
                                post_instance.groups.add(group)
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
                            sent_message = bot.send_message(group.group_id, formatted_text, parse_mode='MarkdownV2')
                            GroupPost.objects.create(post=post_instance, group=group,
                                                     message_id=sent_message.message_id)
                            post_instance.groups.add(group)

                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
                        keyboard = InlineKeyboardMarkup()
                        delete_button = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"delete_{post_instance.id}")
                        pin_button = InlineKeyboardButton("–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"pin_{post_instance.id}")
                        keyboard.add(delete_button, pin_button)

                    except Exception as e:
                        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –≥—Ä—É–ø–ø—É {group.group_id}: {e}")

            bot.send_message(chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ {len(groups)} –≥—Ä—É–ø–ø–∞–º.", reply_markup=keyboard)
            show_admin_panel(chat_id)
        else:
            bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.")

        broadcast_data.pop(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('pin_') or call.data.startswith('delete_'))
def handle_post_actions(call):
    action, post_id_str = call.data.split('_', 1)  #

    post_id = int(post_id_str.replace('post_', ''))
    print(f"—ç—Ç–æ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ –º—ã –ø–æ–ª—É—á–∞–µ–º: {post_id}")
    post = Posts.objects.get(id=post_id)

    if action == 'pin':
        pin_post_in_groups(post)
        bot.answer_callback_query(call.id, "–ü–æ—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω.")
    elif action == 'delete':
        delete_post_from_groups(post)
        bot.answer_callback_query(call.id, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω.")


def pin_post_in_groups(post):
    group_posts = GroupPost.objects.filter(post=post)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å—Ç–∞—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö
    for group_post in group_posts:
        try:
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            bot.pin_chat_message(chat_id=group_post.group.group_id, message_id=group_post.message_id)
        except Exception as e:
            pass


def delete_post_from_groups(post):
    post_id = post.id
    posts = Posts.objects.filter(id=post_id)

    group_posts = GroupPost.objects.filter(post=post)

    for group_post in group_posts:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            bot.delete_message(chat_id=group_post.group.group_id, message_id=group_post.message_id)
        except Exception as e:
            pass

    posts.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∞"
def cancel_broadcast(message):
    chat_id = message.chat.id
    if chat_id in broadcast_data:
        broadcast_data.pop(chat_id)
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@bot.message_handler(content_types=['new_chat_members'])
def handle_new_member(message):
    for new_user in message.new_chat_members:
        if new_user.id == bot.get_me().id:
            group_id = message.chat.id
            group_name = message.chat.title
            list_name = group_name[:-1].replace('.', ' ').split()[1]
            language = group_name[:-1].replace('.', ' ').split()[2]

            category_group, created = GroupsCategory.objects.get_or_create(category_name=("".join(list_name)))

            group, created = Groups.objects.get_or_create(group_id=group_id, category=category_group,
                                                          defaults={'name_group': group_name}, language=language)


# –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@bot.message_handler(content_types=['left_chat_member'])
def handle_bot_removed(message):
    if message.left_chat_member.id == bot.get_me().id:
        group_id = message.chat.id
        try:
            group = Groups.objects.get(group_id=group_id)
            group.delete()

        except Groups.DoesNotExist:
            pass


# –≥—Ä—É–ø–ø—ã –≤ —Å—É–ø–ø–µ—Ä–≥—Ä—É–ø–ø—ã
@bot.message_handler(content_types=['new_chat_members', 'migrate_to_chat_id', 'migrate_from_chat_id'])
def handle_group_id_change(message):
    chat_id = message.chat.id

    # —Å–æ–±—ã—Ç–∏–µ migrate_to_chat_id –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É –∏ ID –∏–∑–º–µ–Ω–∏–ª—Å—è
    if message.migrate_to_chat_id:
        new_chat_id = message.migrate_to_chat_id
        old_chat_id = chat_id
        try:
            group = Groups.objects.get(group_id=old_chat_id)
            group.group_id = new_chat_id
            group.save()
            bot.send_message(new_chat_id, f"ID –≥—Ä—É–ø–ø—ã –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_chat_id}")

        except Groups.DoesNotExist:
            pass
        except Exception as e:
            pass

    # —Å–æ–±—ã—Ç–∏–µ migrate_from_chat_id , —á—Ç–æ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è –≥—Ä—É–ø–ø–∞, –æ—Ç–∫—É–¥–∞ –±—ã–ª –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —á–∞—Ç
    elif message.migrate_from_chat_id:
        old_chat_id = message.migrate_from_chat_id
        new_chat_id = chat_id
        try:
            group = Groups.objects.get(group_id=old_chat_id)
            group.group_id = new_chat_id
            group.save()

        except Groups.DoesNotExist:
            pass
        except Exception as e:
            pass
