import logging
import telebot
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.crypto import get_random_string
from telebot import types
from django.conf import settings
from proweb_bot.models import CustomUser, AdminUser, Groups, GroupsCategory
from proweb_bot.translations import translations




def set_webhook():
    webhook_url = f"https://cfb0-192-166-230-205.ngrok-free.app/webhook/"
    bot.set_webhook(url=webhook_url)


bot = telebot.TeleBot(settings.TG_BOT_TOKEN)

logging.basicConfig(level=logging.INFO)


@bot.message_handler(commands=['start'])
def start(message):
    random_password = get_random_string(10)

    user, created = CustomUser.objects.get_or_create(
        username_tg=message.from_user.username,
        tg_id=message.chat.id,
        defaults={'password': random_password, 'name_tg': message.from_user.first_name}
    )

    if created:
        user.set_password(random_password)
        user.save()
        logging.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username_tg} —Å –ø–∞—Ä–æ–ª–µ–º {random_password}")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username_tg} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    btn_en = types.KeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫")
    btn_ru = types.KeyboardButton(text="O'zbek tili üá∫üáø")
    markup.add(btn_en, btn_ru)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫/Tilni tanlang', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫", "O'zbek tili üá∫üáø"])
def choose_language(message):
    user = CustomUser.objects.get(username_tg=message.from_user.username)

    if message.text == "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫":
        user.language = 'ru'
    elif message.text == "O'zbek tili üá∫üáø":
        user.language = 'uz'

    user.save()


    bot.send_message(message.chat.id, translations[user.language]['btn_send_phone'])

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button_phone = types.KeyboardButton(text=translations[user.language]['btn_send_phone'], request_contact=True)
    markup.add(button_phone)
    bot.send_message(message.chat.id, translations[user.language]['btn_send_phone'], reply_markup=markup)


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact:
        try:
            user = CustomUser.objects.get(username_tg=message.from_user.username)
            user.phone_tg = message.contact.phone_number
            user.save()
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            logging.info(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username_tg}")
        except CustomUser.DoesNotExist:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logging.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")


@receiver(post_save, sender=CustomUser)
def create_admin_user(sender, instance, created, **kwargs):
    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_admin")
    markup.add(confirm_button)
    if instance.is_admin:
        AdminUser.objects.create(user=instance, telegram_id=instance.username_tg)
        bot.send_message(instance.tg_id, translations[instance.language]['text_admin_notification'],
                         reply_markup=markup)
    # else:
    #     AdminUser.objects.filter(user=instance).delete()
    #     print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {instance.username} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_admin")
def handle_confirm_admin(call):
    chat_id = call.message.chat.id


    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


    show_admin_panel(chat_id)


def show_admin_panel(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_send_messages = types.KeyboardButton("üì© –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    button_view_courses = types.KeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã")
    markup.add(button_send_messages, button_view_courses)
    bot.send_message(chat_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã')
def category(message):
    chat_id = message.chat.id
    get_category = GroupsCategory.objects.all()
    if get_category.exists():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for cat in get_category:
            button = types.KeyboardButton(cat.category_name)
            markup.add(button)

        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)
    else:
        bot.send_message(chat_id, '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


bot_data = {}


@bot.message_handler(func=lambda message: message.text in [cat.category_name for cat in GroupsCategory.objects.all()])
def handle_category_selection(message):
    chat_id = message.chat.id
    selected_category_name = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    groups = Groups.objects.filter(category__category_name=selected_category_name)

    if groups.exists():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ bot_data
        bot_data[chat_id] = {
            "selected_category": selected_category_name
        }

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_ru = types.KeyboardButton("–†–£–°")
        button_uzb = types.KeyboardButton("UZB")
        button_all = types.KeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º')
        markup.add(button_ru, button_uzb, button_all)

        bot.send_message(chat_id, f"–ì—Ä—É–ø–ø—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_category_name}':", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


@bot.message_handler(func=lambda message: message.text in ["–†–£–°", "UZB", "–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º"])
def handle_language_selection(message):
    chat_id = message.chat.id
    selected_language = message.text

    if chat_id in bot_data:
        selected_category = bot_data[chat_id]["selected_category"]

        if selected_language == "–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º":
            groups = Groups.objects.filter(category__category_name=selected_category)
        else:
            groups = Groups.objects.filter(category__category_name=selected_category, language=selected_language)

        bot_data[chat_id]["selected_language"] = selected_language
        bot_data[chat_id]["groups"] = groups  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏

        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å —è–∑—ã–∫–æ–º '{selected_language}'")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")






@bot.message_handler(func=lambda message: message.chat.id in bot_data and "selected_language" in bot_data[message.chat.id])
def handle_broadcast_message(message):
    chat_id = message.chat.id
    groups = bot_data[chat_id].get("groups", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type == 'text':
        broadcast_text = message.text
        media = None
    elif message.content_type == 'photo':
        broadcast_text = message.caption or ""  # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        media = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if media:
        print(f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ {media} —Å —Ç–µ–∫—Å—Ç–æ–º "{broadcast_text}"')
    else:
        print(f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: "{broadcast_text}"')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø
    if groups.exists():
        for group in groups:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º (–∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
                if media:
                    bot.send_photo(group.group_id, photo=media, caption=broadcast_text)
                else:
                    bot.send_message(group.group_id, broadcast_text)

                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É: {group.name_group}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group.name_group}: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        bot.send_message(chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ {len(groups)} –≥—Ä—É–ø–ø–∞–º —Å —è–∑—ã–∫–æ–º '{bot_data[chat_id]['selected_language']}'.")
        del bot_data[chat_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    else:
        bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.")


    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –º–æ–¥–µ–ª—å
@bot.message_handler(content_types=['new_chat_members'])
def handle_new_member(message):
    for new_user in message.new_chat_members:
        if new_user.id == bot.get_me().id:
            group_id = message.chat.id
            group_name = message.chat.title
            list_name = group_name[:-1].replace('.', ' ').split()[1]
            language = group_name[:-1].replace('.', ' ').split()[2]

            category_group, created = GroupsCategory.objects.get_or_create(category_name=("".join(list_name)))

            group, created = Groups.objects.get_or_create(group_id=group_id, category=category_group,
                                                          defaults={'name_group': group_name}, language=language)


# –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@bot.message_handler(content_types=['left_chat_member'])
def handle_bot_removed(message):
    if message.left_chat_member.id == bot.get_me().id:
        group_id = message.chat.id
        try:
            group = Groups.objects.get(group_id=group_id)
            group.delete()

        except Groups.DoesNotExist:
            pass
